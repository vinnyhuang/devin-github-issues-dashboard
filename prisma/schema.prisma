// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Issue {
    id          String   @id @default(cuid())
    githubId    BigInt   @unique  // GitHub IDs can be very large
    number      Int      // Issue number (e.g., #123)
    title       String
    body        String?
    url         String
    state       String
    labels      Json?    // Array of label objects
    repository  String
    sessions    DevinSession[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model DevinSession {
    id              String   @id @default(cuid())
    sessionId       String   @unique  // Devin session ID
    issueId         String
    issue           Issue    @relation(fields: [issueId], references: [id])
    type            String   // 'analysis' or 'resolution'
    status          String   // 'running', 'completed', 'failed'
    result          Json?    // Structured results from Devin
    messages        String?  // Real-time message stream from Devin (stringified JSON)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
